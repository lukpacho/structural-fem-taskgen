# .github/workflows/ci.yml
name: CI

on:
  pull_request:
  push:
    branches: [main]
    tags:     ['v*']

jobs:
  test:
    name: ðŸ§ª Lint & tests (Py${{ matrix.python }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.11', '3.12' ]
    steps:
      # 1) Check out the code (pulls repo into the runner)
      - uses: actions/checkout@v4

      # 2) Install Python
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      # 3) Install system libraries gmsh needs
      - run: sudo apt-get update -y && sudo apt-get install -y libglu1-mesa

      # 4) Install project + dev tools
      - run: |
          pip install -e .[dev]

      # 5) Ruff linter (fail on warnings)
      - name: Ruff lint
        run: ruff check --config pyproject.toml .

      # 6) Black formatting (fail if the auto-format would change files)
      - name: Black check
        run: black --check --config pyproject.toml .

      # 7) Static type checking
      - name: Mypy type-check
        run: mypy --config-file pyproject.toml src/ tests/

      # 8) run unit tests (located in ./tests)
      - run: pytest -q
  
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest
    permissions: { contents: write, packages: write, id-token: write }
    env:
      PYPI_TARGET: ${{ vars.PYPI_target || 'test'}}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }

      # ---------- Build wheel -------------------------------------------------
      - name: Build wheel
        run: |
          pip install build
          python -m build --wheel

      # ---- 1) Verify wheel sanity
      - name: Install & pip-check wheel
        run: |
          pip install dist/*.whl
          pip check
          taskgen --help

      # ---- 2) Publish to Test PyPI if 'test'
      - name: Publish to **Test PyPI**
        if: env.PYPI_TARGET == 'test'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload --repository testpypi dist/*.whl

       # ---- 2) Publish to PyPI if 'prod'
      - name: Publish to **PyPI**
        if: env.PYPI_TARGET == 'prod'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*.whl

      # ---------- Build & push Docker images ---------------------------------
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          build-args: |
            WHEEL_VERSION=${{ github.ref_name }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest
            docker.io/${{ secrets.DOCKERHUB_USER }}/taskgen:${{ github.ref_name }}
            docker.io/${{ secrets.DOCKERHUB_USER }}/taskgen:latest

      - name: Smoke-test pushed image
        run: |
          docker run --rm ghcr.io/${{ github.repository }}:${{ github.ref_name }} --help